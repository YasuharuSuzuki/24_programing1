# 2行の文字列をsplitしながら受け取ります
s = input().split('、') # 1行の文字列 → 4つの文字列のリストに変換
s += input().split('、') # 1行の文字列 → 4つの文字列のリストに変換 → 前のリストに追加

# 分解した８つの要素を、for文で回しながら解析していきます。
red = False # 赤フラグ。Trueのときに赤を上げている状態として判定するための変数です
white = False # 白フラグ。Trueのときに白を上げている状態として判定するための変数です
for s1 in s: # 8つの要素を回すループ
    if s1[1:].startswith('上げて') or s1[1:].startswith('下げない'): # 2文字目以降を抽出して '上げて' もしくは '下げない' を判定します。つまり上げている状態の判定ですね。startswith()を用いているのは'で'が後ろにつくケースを考慮しています
        if s1[0] == '赤': # 1文字目が赤なら
            red = True # 赤フラグを立てます。赤を上げている状態となります。
        else: # 1文字目が赤以外なら白しかないので
            white = True # 白フラグを立てます。白を上げている状態となります。
    elif s1[1:].startswith('下げて') or s1[1:].startswith('上げない'): # 2文字目以降を抽出して '下げて' もしくは '上げない' を判定します。つまり下げている状態の判定ですね。startswith()を用いているのは'で'が後ろにつくケースを考慮しています
        if s1[0] == '赤': # 1文字目が赤なら
            red = False # 赤フラグをOFFにします。赤を下げている状態となります。
        else: # 1文字目が赤以外なら白しかないので
            white = False # 白フラグをOFFにします。白を下げている状態となります。
#     print(red, white) # これは動作確認用のprint()文です。途中経過を見たい時にコメントアウトを外して、変数の内容を確認します。

# 赤/白を上げた判定を元にprint文を書きます。「赤 白」「赤」「白」「どちらも上げない」の4パターンを出力します。
if red and white:
    print('赤 白')
elif red:
    print('赤')
elif white:
    print('白')
else:
    print('どちらも上げない')
